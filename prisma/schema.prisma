// This is your Prisma schema file,
// learn more about it in the docs https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String? @unique
  email         String   @unique
  password      String? @unique
 emailVerified DateTime?
   role      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post    Post[]
  Comment  Comment[]
  Replies Replies[]
  Bookmark Bookmark[]
}

model VerificationToken {
  identifier String @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id  String @id @default(cuid()) @map("_id")
  slug  String @unique
  title  String
  img  String?
  Post  Post[]
}
model Post {
  id  String @id @default(cuid()) @map("_id")
  slug  String @unique
  title  String
  des  String
  subDes String
  img String?
  imgUrls String[]
  createdAt DateTime @default(now())
  views  Int @default(0)
  catSlug  String
  cat Category @relation(fields : [catSlug], references: [slug])
  userEmail String
  user User @relation(fields : [userEmail], references:[email])
  comments  Comment[]
  replies Replies[]

  
}
model Comment {
  id  String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  des  String
   userEmail String
  user User @relation(fields : [userEmail], references:[email])
  postSlug String
  post Post  @relation(fields : [postSlug], references : [slug])
  replies Replies[]

  
}

model Replies {
  id String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  des String
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  postSlug String
   post Post  @relation(fields : [postSlug], references : [slug])
  commentId String?
  comment Comment? @relation(fields: [commentId], references: [id])
  parentReplyId String?
  parentReply  Replies? @relation("ReplyToReply", fields: [parentReplyId], references: [id],onDelete: NoAction, onUpdate: NoAction)
  replies Replies[] @relation("ReplyToReply")

}

model Bookmark {
  id  String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  postId String @unique
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
}



